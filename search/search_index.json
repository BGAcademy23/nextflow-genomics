{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to NextFlow for genomics","text":"<p>This session is part of Biodiversity Genomics Academy 2023</p>"},{"location":"#zoom-link-wed-20-sep-2300-utc","title":"Zoom Link Wed 20 Sep 23:00 UTC","text":"<p>Add to calendar</p>"},{"location":"#session-leaders","title":"Session Leader(s)","text":"<p>Solenne Correard I would like to acknowledge that I am living and working on the traditional, ancestral, and unceded territory of the Musqueam, Squamish and Tsleil-Waututh people.  </p> <p>Canada Biogenome Project Canada's Michael Smith Genome Sciences Centre</p> <p>I did my PhD in France studying the dog genome (mostly the non-coding part), followed by a post-doc on the Silent Genomes Project, a project aiming to reduce health care disparities and improve diagnostic success for children with rare genetic diseases from Indigenous populations in Canada. I am now leading the bioinformatic analysis for the Canadian BioGenome Project.</p>"},{"location":"#description","title":"Description","text":"<p>The session will last for about 1h30, and will be split in 2 parts of about 40 min each (we'll take a 10 min break in the middle).</p> <p>Each part will include an introduction, some coding and hopefully many questions and discussion!</p> <p>Outline of the session :</p> <ul> <li>Nextflow (Part 1) : What is it? When should I use it? How do I use it? </li> </ul> <p>Practice : Writing your first Nextflow pipeline to generate a contig assembly. </p> <ul> <li>NF-core (Part 2): What is it? When should I use it? How do I use it? </li> </ul> <p>Practice : Use NF-core tools to assess the quality of the generated assembly. </p> <ul> <li>Conclusion: Resources to learn more about Nextflow and NF-core and how to take part in the community.</li> </ul> <p>By the end of this session you will be able to:</p> <ol> <li>Read a nextflow pipeline and modify it</li> <li>Write a basic nextflow pipeline</li> <li>Use a nf-core pipeline</li> <li>How to join the nextflow / nf-core community</li> </ol> <p>The outline may change if I come up with a better idea while generating the material!</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ol> <li>Expertise with linux command line basics (<code>cd</code>, <code>mv</code>, <code>rm</code>, <code>wget</code>, <code>curl</code> etc)</li> <li>Understanding of bash scripts, and the need for bioinformatics workflows</li> <li>Understand the general role and input/output files of the following tools : hifiasm HiFi only, Quast, multiQC</li> </ol> <p>Please make sure you MEET THE PREREQUISITES and READ THE DESCRIPTION above</p> <p>You will get the most out of this session if you meet the prerequisites above.</p> <p>Please also read the description carefully to see if this session is relevant to you.</p>"},{"location":"#tutorial","title":"Tutorial","text":"<p>We will be using GitPod for this tutorial so SEND ME TO GITPOD!.</p> <p>Do not use safari</p> <p>Give it a minute to install nextflow and mamba...</p> <p>!! Open a new terminal in gitpod !! </p> <p>(If you don't do that, nextflow and conda won't work)</p>"},{"location":"#part-1","title":"Part 1","text":"<ol> <li>Launching your first pipeline (example with hifiasm)</li> </ol> <pre><code>cd nextflow-genomics/nextflow_workshop_part1/\n</code></pre> <p>You will see 2 files : nextflow.config and main.nf</p> <p>Feel free to look at the files!</p> <p>Launch your nextflow pipeline</p> <pre><code>nextflow_cmd run main.nf -profile mamba\n</code></pre> <ol> <li>Adding a module (example with Quast)</li> </ol> <p>Try to do it on your own :</p> <ul> <li> <p>in the main.nf file, Copy / paste a previous module as a template (for example hifiasm)</p> </li> <li> <p>Replace the conda and singularity info for the module of interest</p> </li> <li> <p>Identify the input and output files</p> </li> <li> <p>Include the code for the given module (often on the github of the tool)</p> </li> <li> <p>Include the newly generated process in the workflow</p> </li> <li> <p>Try and correct the errors <pre><code>nextflow run main.nf \u2013profile mamba -resume\n</code></pre></p> </li> </ul> Solution There are several ways of coding a module, here is an example for the main.nf file to run hifiasm then quast :  <pre><code>// Declare syntax version\nnextflow.enable.dsl=2\n\nworkflow {\n\n    fastq_file = [\n        [ id:'test_run', single_end: true],\n        [ file(params.fastq_file, checkIfExists: true)]\n    ]\n\n   HIFIASM(fastq_file)\n   QUAST(HIFIASM.out.assembly_fa)\n}\n\nprocess HIFIASM {\n\n    conda \"bioconda::hifiasm=0.18.5\"\n    container \"${ workflow.containerEngine == 'singularity' &amp;&amp; !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hifiasm:0.18.5--h5b5514e_0' :\n        'biocontainers/hifiasm:0.18.5--h5b5514e_0' }\"\n\n  input:\n    tuple val(meta), path(reads)\n\n  output:\n    tuple val(meta), path(\"*.gfa\"), emit: assembly_gfa\n    tuple val(meta), path(\"*.fa\"), emit: assembly_fa\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    hifiasm \\\\\n    $args \\\\\n        -o ${prefix}.asm \\\\\n        -t $task.cpus \\\\\n        $reads\n\n    #Transform gfa to fa\n    awk '/^S/{print \"&gt;\"\\$2;print \\$3}' ${prefix}.asm.gfa &gt; ${prefix}.fa\n    \"\"\"\n}\n\nprocess QUAST {\n\n    conda 'bioconda::quast=5.2.0'\n    container \"${ workflow.containerEngine == 'singularity' &amp;&amp; !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/quast:5.2.0--py39pl5321h2add14b_1' :\n        'quay.io/biocontainers/quast:5.2.0--py39pl5321h2add14b_1' }\"\n\n    input:\n    tuple val(meta), path (fasta)\n\n    output:\n    path 'report.tsv'        , emit: tsv\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: 'quast'\n    \"\"\"\n    quast.py \\\\\n        --output-dir $prefix \\\\\n        $args \\\\\n        $fasta\n\n    mv ${prefix}/report.tsv report.tsv\n    \"\"\"\n}\n</code></pre>"},{"location":"#part-2","title":"Part 2","text":"<ol> <li>Add a module using nf-core</li> </ol> <pre><code>cd nextflow-genomics/nextflow_workshop_part2/\n</code></pre> <p>You will see a new folder : 'modules'</p> <p>Feel free to look inside the folder and sub-folders!</p> <p>Launch this nextflow pipeline</p> <pre><code>nextflow_cmd run main.nf -profile mamba\n</code></pre> <p>Now add the samtools_faidx module to your pipeline</p> Solution Create the appropriate folder for samtools_faidx module  <pre><code>mkdir modules/samtools_faidx\n</code></pre>  Copy the nf-core/samtools_faidx process in this folder : https://github.com/nf-core/modules/blob/master/modules/nf-core/samtools/faidx/main.nf  <pre><code>vi modules/samtools_faidx/main.nf\n</code></pre>  Modify the workflow main.nf to include this new process  <pre><code>// Declare syntax version\nnextflow.enable.dsl=2\n\ninclude { HIFIASM } from './modules/hifiasm/main.nf'\ninclude { QUAST } from './modules/quast/main.nf'\ninclude { SAMTOOLS_FAIDX } from './modules/samtools_faidx/main.nf'\n\nworkflow {\n\n        fastq_file = [\n                [ id:'test_run', single_end: true],\n                [ file(params.fastq_file, checkIfExists: true)]\n        ]\n\n   HIFIASM(fastq_file)\n   QUAST(HIFIASM.out.assembly_fa)\n   SAMTOOLS_FAIDX(HIFIASM.out.assembly_fa, [[],[]])\n}\n</code></pre>"}]}